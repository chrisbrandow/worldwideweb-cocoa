#!/usr/bin/env python3

from pathlib import Path
import xml.etree.ElementTree as ET

import argparse
import typedstream

def ts_to_xib(ts: typedstream.archiving.GenericArchivedObject) -> ET.ElementTree:
    document = ET.Element('document', attrib={
        'type': 'com.apple.InterfaceBuilder3.Cocoa.XIB',
        'version': '3.0',
        'toolsVersion': '32700.99.1234',
        'targetRuntime': 'MaxOSX.Cocoa',
        'propertyAccessControl': 'none',
        'useAutolayout': 'NO',
        'customObjectInstantiationMethod': 'direct',
    })
    document.append(ET.Comment('NOTE: This file is autogenerated using the (highly work-in-progress) convert-nib-to-xib script'))

    dependencies = ET.SubElement(document, 'dependencies')
    objects = ET.SubElement(document, 'objects')

    xib = ET.ElementTree(document)
    ET.indent(xib, space=' ' * 4)
    return xib

def main():
    parser = argparse.ArgumentParser(description='Converts a legacy NeXTStep NIB to XIB.')
    parser.add_argument('-o', '--output', required=True, type=Path, help='The path to the output XIB.')
    parser.add_argument('input', type=Path, help='The path to the input NIB.')

    args = parser.parse_args()

    ts = typedstream.unarchive_from_file(args.input / 'data.nib')

    xib = ts_to_xib(ts)
    xib.write(args.output, encoding='utf-8', xml_declaration=True)

if __name__ == '__main__':
    main()
